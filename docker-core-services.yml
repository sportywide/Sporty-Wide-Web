version: '3.5'
services:
    postgres:
        container_name: sw_postgres
        image: sportywide/sportywide-postgres
        environment:
            - POSTGRES_DB=${SW_POSTGRES_DB}
            - POSTGRES_USER=${SW_POSTGRES_USER}
            - POSTGRES_PASSWORD=${SW_POSTGRES_PASSWORD}
        volumes:
            - postgres:/var/lib/postgres/data
        ports:
            - '${SW_POSTGRES_PORT}:5432'
        networks:
            - sw_net_backend
    flyway:
        container_name: sw_flyway
        image: sportywide/sportywide-flyway
        command: -url=jdbc:postgresql://postgres:5432/${SW_POSTGRES_DB} -user=${SW_POSTGRES_USER} -password=${SW_POSTGRES_PASSWORD} -outOfOrder=true -mixed=true migrate
        volumes:
            - './sql:/flyway/sql'
        environment:
            WAIT_HOSTS: postgres:5432
        depends_on:
            - postgres
        networks:
            - sw_net_backend
    redis:
        container_name: sw_redis
        image: sportywide/sportywide-redis
        volumes:
            - redis:/data
        ports:
            - '${SW_REDIS_PORT}:6379'
        networks:
            - sw_net_backend
    mailhog:
        container_name: sw_mailhog
        image: sportywide/sportywide-mailhog
        ports:
            - '${SW_MAILHOG_TRANSPORT_PORT}:1025'
            - '${SW_MAILHOG_UI_PORT}:8025'
        networks:
            - sw_net_backend
        labels:
            - 'traefik.frontend.rule=Host:mail.sportywidedev.com'
            - 'traefik.port=8025'
    traefik:
        container_name: sw_traefik
        image: traefik:1.7.16
        command: --web --docker --logLevel=INFO
        ports:
            - 80:80
            - 443:443
            - 8080:8080
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./traefik.toml:/traefik.toml:ro
            - ./certs/sportywide-cert.pem:/certs/sportywide-cert.pem
            - ./certs/sportywide-key.pem:/certs/sportywide-key.pem
        networks:
            - sw_net_frontend
            - sw_net_backend
    mongo:
        image: mongo:4.0.13-xenial
        container_name: sw_mongo
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: ${SW_MONGO_INITDB_ROOT_PASSWORD}
            MONGO_INITDB_DATABASE: admin
            SW_MONGO_USER: ${SW_MONGO_USER}
            SW_MONGO_PASSWORD: ${SW_MONGO_PASSWORD}
            SW_MONGO_DB: ${SW_MONGO_DB}
        ports:
            - 27017:27017
        networks:
            - sw_net_backend
        volumes:
            - mongo:/data/db
            - ./scripts/mongo/:/docker-entrypoint-initdb.d/
    sqs:
        container_name: sw_sqs
        image: roribio16/alpine-sqs
        ports:
            - 9324:9324
            - 9325:9325
        networks:
            - sw_net_frontend
            - sw_net_backend
volumes:
    postgres:
        name: sw_volume_postgres
    redis:
        name: sw_volume_redis
    mongo:
        name: sw_volume_mongo
networks:
    sw_net_frontend:
        driver: bridge
        name: sw_net_frontend
    sw_net_backend:
        driver: bridge
        name: sw_net_backend
